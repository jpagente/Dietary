{"version":3,"file":"static/js/687.9954a1fe.chunk.js","mappings":"yKACA,EAAqC,8CAArC,EAA0G,gDAA1G,EAAiL,gDAAjL,EAAoQ,4DAApQ,EAAwV,iDAAxV,EAA+Z,+C,mBC+F/Z,EA3F0B,SAAC,GAAyC,IAAD,IAAtCA,eAAAA,OAAsC,SAAfC,EAAe,EAAfA,SAC5CC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAEMC,EAAU,CACdL,KAAMC,EACNC,MAAOC,EACPC,SALF,MAQME,EAAoB,SAAAC,GACxB,MAAwBA,EAAMC,OAAtBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACdJ,EAAQL,GAAMS,EACf,EAkBD,OACE,kBAAMC,UAAWC,EAAyBf,SAbnB,SAAAW,GAEvB,GADAA,EAAMK,iBACFjB,EAIF,OAHAC,EAAS,CAAEM,MAAAA,EAAOE,SAAAA,EAAUS,SAAUb,SACtCH,EAAS,eAIXD,EAAS,CAAEM,MAAAA,EAAOE,SAAAA,GAEnB,EAGC,WACE,eAAIM,UAAWC,EAAf,SACGhB,EAAiB,eAAiB,UAEpCA,IACC,4BACE,kBACEe,UAAWC,EACXG,KAAK,OACLC,GAAG,OACHf,KAAK,OACLgB,QAAQ,yHACRC,MAAM,yIACNC,YAAY,OACZC,UAAQ,EACRC,SAAUd,OAIhB,4BACE,kBACEI,UAAWC,EACXG,KAAK,QACLC,GAAG,QACHf,KAAK,QACLkB,YAAY,QACZC,UAAQ,EACRC,SAAUd,OAGd,4BACE,kBACEI,UAAWC,EACXG,KAAK,WACLC,GAAG,WACHf,KAAK,WACLkB,YAAY,WACZG,UAAW,EACXF,UAAQ,EACRC,SAAUd,OAGd,iBAAKI,UAAWC,EAAhB,WACE,mBAAQD,UAAWC,EAA4BG,KAAK,SAApD,SACGnB,EAAiB,WAAa,WAEjC,SAAC,KAAD,CACEe,UAAWC,EACXW,GAAI3B,EAAiB,SAAW,YAFlC,SAIGA,EAAiB,QAAU,kBAKrC,C,0HC7FD,EAA4B,6B,SC0B5B,EApBkB,WAChB,IAAM4B,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,IAM/B,OACE,iCACIF,IACA,gBAAKf,UAAWC,EAAhB,UACE,SAACiB,EAAA,EAAD,CAAmBjC,gBAAgB,EAAOC,SAR9B,SAAAiC,GAClBN,GAASO,EAAAA,EAAAA,IAAUD,GACpB,MASIJ,IAAc,SAAC,KAAD,CAAUH,GAAG,QAGjC,C","sources":["webpack://slimmom/./src/components/AuthorizationForm/AuthorizationForm.module.scss?f9f4","components/AuthorizationForm/AuthorizationForm.jsx","webpack://slimmom/./src/pages/LoginPage/LoginPage.module.scss?8fcb","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"authorization_form\":\"AuthorizationForm_authorization_form__cxoZB\",\"authorization__title\":\"AuthorizationForm_authorization__title__lmEYr\",\"authorization__input\":\"AuthorizationForm_authorization__input__GrnjT\",\"authorization__buttons_container\":\"AuthorizationForm_authorization__buttons_container__-O3Ru\",\"authorization__button\":\"AuthorizationForm_authorization__button__+9qWQ\",\"authorization__link\":\"AuthorizationForm_authorization__link__B8OcR\"};","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport scss from './AuthorizationForm.module.scss';\nimport { useNavigate } from 'react-router-dom';\n\nconst AuthorizationForm = ({ isRegisterForm = true, onSubmit }) => {\n  const navigate = useNavigate();\n  const [name, setname] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const userMap = {\n    name: setname,\n    email: setEmail,\n    password: setPassword,\n  };\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    userMap[name](value);\n  };\n\n\n\n\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    if (isRegisterForm) {\n      onSubmit({ email, password, username: name });\n      navigate('/calculator');\n\n      return;\n    }\n    onSubmit({ email, password });\n\n  };\n\n  return (\n    <form className={scss.authorization_form} onSubmit={handleFormSubmit}>\n      <h2 className={scss.authorization__title}>\n        {isRegisterForm ? 'Registration' : 'Login'}\n      </h2>\n      {isRegisterForm && (\n        <label>\n          <input\n            className={scss.authorization__input}\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\"Name\"\n            required\n            onChange={handleInputChange}\n          />\n        </label>\n      )}\n      <label>\n        <input\n          className={scss.authorization__input}\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          placeholder=\"Email\"\n          required\n          onChange={handleInputChange}\n        />\n      </label>\n      <label>\n        <input\n          className={scss.authorization__input}\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          minLength={8}\n          required\n          onChange={handleInputChange}\n        />\n      </label>\n      <div className={scss.authorization__buttons_container}>\n        <button className={scss.authorization__button} type=\"submit\">\n          {isRegisterForm ? 'Register' : 'Login'}\n        </button>\n        <Link\n          className={scss.authorization__link}\n          to={isRegisterForm ? '/login' : '/register'}\n        >\n          {isRegisterForm ? 'Login' : 'Register'}\n        </Link>\n      </div>\n    </form>\n  );\n};\n\nexport default AuthorizationForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"loginPage\":\"LoginPage_loginPage__9b87u\"};","import AuthorizationForm from 'components/AuthorizationForm/AuthorizationForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router';\nimport { loginUser } from 'redux/authorization/authOperations';\nimport { selectIsLoggedIn } from 'redux/authorization/authSelectors';\nimport scss from './LoginPage.module.scss';\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  const handleLogin = userData => {\n    dispatch(loginUser(userData));\n  };\n\n  return (\n    <>\n      {!isLoggedIn && (\n        <div className={scss.loginPage}>\n          <AuthorizationForm isRegisterForm={false} onSubmit={handleLogin} />\n        </div>\n      )}\n      {isLoggedIn && <Navigate to=\"/\" />}\n    </>\n  );\n};\n\nexport default LoginPage;\n"],"names":["isRegisterForm","onSubmit","navigate","useNavigate","useState","name","setname","email","setEmail","password","userMap","handleInputChange","event","target","value","className","scss","preventDefault","username","type","id","pattern","title","placeholder","required","onChange","minLength","to","dispatch","useDispatch","isLoggedIn","useSelector","selectIsLoggedIn","AuthorizationForm","userData","loginUser"],"sourceRoot":""}